#!/usr/bin/env bash
###############################################################################
# vbox - a bask script
#
# Add this script and bask to your $PATH. For usage information, run:
# vbox help
###############################################################################

source "$(which bask)"

desc "HELP_HEADER" <<EOM
        _
 __   _| |__   _____  __
 \\\\ \\\\ / / '_ \\\\ / _ \\\\ \\\\/ /
  \\\\ V /| |_) | (_) >  <
   \\\\_/ |_.__/ \\\\___/_/\\\\_\\\\

A collection of shortcuts for VBoxManage, the VirtualBox command line tool.

The VBoxManage UI is a bit cryptic and unintuitive, IMHO, so these shortcuts
provide a streamlined interface to the most common functionality.
EOM

# ------------------------------------------------------------------------ kill

desc "kill" <<EOM
Usage:
  $_ME kill <name|uuid>

Description:
  Command: \`VBoxManage controlvm <vm> poweroff\`

  Has the same effect on a virtual machine as pulling the power cable on a real
  computer. The state of the VM is not saved beforehand, and data may be lost.
  (This is equivalent to selecting the "Close" item in the "Machine" menu of
  the GUI or pressing the window's close button, and then selecting "Power off
  the machine" in the dialog.)
EOM
kill() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\n"
  fi
  VBoxManage controlvm "${id}" poweroff
}

# ------------------------------------------------------------------------ list

desc "list" <<EOM
Usage:
  $_ME list [running|status]

Arguments:
  running  List all running VMs.
  status   Display all VMs with basic status information.

Description:
  List VirtualBox VMs.
EOM
list() {
  if _contains "running" "${_COMMAND_PARAMETERS[@]:-}"
  then
    VBoxManage list runningvms
  elif _contains "status" "${_COMMAND_PARAMETERS[@]:-}"
  then
    VBoxManage list vms -l | \
      awk '/^Name:[ ]{5,}|^State:[ ]{5,}/ {print}' | \
      sed s/\ \ //g | \
      cut -d: -f2-
  else
    VBoxManage list vms
  fi
}

# ----------------------------------------------------------------------- pause

desc "pause" <<EOM
Usage:
  $_ME pause <name|uuid>

Description:
  Command: \`VBoxManage controlvm <vm> pause\`

  Temporarily puts a virtual machine on hold, without changing its state for
  good. The VM window will be painted in gray to indicate that the VM is
  currently paused. (This is equivalent to selecting the "Pause" item in the
  "Machine" menu of the GUI.)
EOM
pause() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\n"
  fi
  VBoxManage controlvm "${id}" pause
}

# ----------------------------------------------------------------------- reset

desc "reset" <<EOM
Usage:
  $_ME reset <name|uuid>

Description:
  Command: \`VBoxManage controlvm <vm> reset\`

  Has the same effect on a virtual machine as pressing the "Reset" button on a
  real computer: a cold reboot of the virtual machine, which will restart and
  boot the guest operating system again immediately. The state of the VM is not
  saved beforehand, and data may be lost. (This is equivalent to selecting the
  "Reset" item in the "Machine" menu of the GUI.)
EOM
reset() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\n"
  fi
  VBoxManage controlvm "${id}" poweroff
}

# ---------------------------------------------------------------------- resume

desc "resume" <<EOM
Usage:
  $_ME resume <name|uuid>

Description:
  Command: \`VBoxManage controlvm <vm> resume\`

  Undo a previous pause command. (This is equivalent to selecting the "Resume"
  item in the "Machine" menu of the GUI.)
EOM
resume() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\n"
  fi
  VBoxManage controlvm "${id}" resume
}

# ------------------------------------------------------------------------ show

desc "show" <<EOM
Usage:
  $_ME show <name|uuid>

Description:
  Command: \`VBoxManage showvminfo <vm>\`

  Show information about a particular virtual machine.
EOM
show() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\n"
  fi
  VBoxManage showvminfo "${id}"
}

# ----------------------------------------------------------------------- start

desc "start" <<EOM
Usage:
  $_ME start <name|uuid> [--headless]

Description:
  Start the VM with the given name or UUID.
EOM
start() {
  local headless=
  local id=

  for arg in "${_COMMAND_ARGV[@]:-}"
  do
    case "${arg}" in
      --headless) headless=1;;
      *) id="${arg}";;
    esac
  done

  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\n"
  fi

  if [[ -n "${headless}" ]]
  then
    VBoxManage startvm "${id}" --type headless
  else
    VBoxManage startvm "${id}"
  fi
}

# ---------------------------------------------------------------------- status

desc "status" <<EOM
Usage:
  $_ME status [<name|uuid> [--long|-l]]

Options:
  -l --long  Display long-form status information for the specified VM.

Description:
  When no argument has been passed, this acts as an alias for
  \`$_ME list status\` and displays the status for all of the VMs. When
  passed a VM name or UUID, the status aka state of that VM is displayed.
EOM
status() {
  local id="${1:-}"
  _debug "status() \$id: %s\n" "${id:-}"

  if [[ -n "${id}" ]]
  then
    if _command_argv_includes "--long" || _command_argv_includes "-l"
    then
      $_ME show "${id}" | \
        awk '/State:/ {for (i=2; i<NF; i++) printf $i " "; print $NF}'
    else
      # Only display state name. Using two `awk` statements since the state
      # can be displayed with one or more word, which is viewed as multiple
      # fields. Instead get all of the fields and then blank out everything
      # after the first parenthesis.
      $_ME show "${id}" | \
        awk '/State:/ {for (i=2; i<NF; i++) printf $i " "; print $NF}' | \
        awk '{gsub(/\(.*/,"");print}'
    fi
  else
    $_ME list status
  fi
}

# ------------------------------------------------------------------------ stop

desc "stop" <<EOM
Usage:
  $_ME stop <name|uuid>

Description:
  Command: \`VBoxManage controlvm <vm> savestate\`

  Save the current state of the VM to disk and then stop the VM. (This is
  equivalent to selecting the "Close" item in the "Machine" menu of the GUI or
  pressing the window's close button, and then selecting "Save the machine
  state" in the dialog.)
EOM
stop() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\n"
  fi
  VBoxManage controlvm "${id}" savestate
}

###############################################################################
# init
###############################################################################

_init
